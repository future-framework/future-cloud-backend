# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type File implements Node {
  id: ID!
  name: String!
  size: Int!
  secret: String!
  contentType: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  url: String!
  versionMain(where: VersionWhereInput): Version
  versionTrainData(where: VersionWhereInput): Version
}

type Fn implements Node {
  id: ID!
  name: String!
  versions(where: VersionWhereInput, orderBy: VersionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Version!]
}

type Post implements Node {
  id: ID!
  isPublished: Boolean!
  title: String!
  text: String!
}

type Version implements Node {
  id: ID!
  fn(where: FnWhereInput): Fn!
  number: String!
  main(where: FileWhereInput): File
  trainData(where: FileWhereInput): File
}


#
# Other Types
#

type AggregateFile {
  count: Int!
}

type AggregateFn {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateVersion {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

scalar DateTime

"""
A connection to a list of items.
"""
type FileConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  name: String!
  size: Int!
  secret: String!
  contentType: String!
  url: String!
  versionMain: VersionCreateOneWithoutMainInput
  versionTrainData: VersionCreateOneWithoutTrainDataInput
}

input FileCreateOneWithoutVersionMainInput {
  create: FileCreateWithoutVersionMainInput
  connect: FileWhereUniqueInput
}

input FileCreateOneWithoutVersionTrainDataInput {
  create: FileCreateWithoutVersionTrainDataInput
  connect: FileWhereUniqueInput
}

input FileCreateWithoutVersionMainInput {
  name: String!
  size: Int!
  secret: String!
  contentType: String!
  url: String!
  versionTrainData: VersionCreateOneWithoutTrainDataInput
}

input FileCreateWithoutVersionTrainDataInput {
  name: String!
  size: Int!
  secret: String!
  contentType: String!
  url: String!
  versionMain: VersionCreateOneWithoutMainInput
}

"""
An edge in a connection.
"""
type FileEdge {
  """
  The item at the end of the edge.
  """
  node: File!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  size_ASC
  size_DESC
  secret_ASC
  secret_DESC
  contentType_ASC
  contentType_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  url_ASC
  url_DESC
}

type FilePreviousValues {
  id: ID!
  name: String!
  size: Int!
  secret: String!
  contentType: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  url: String!
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FileSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [FileSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FileWhereInput
}

input FileUpdateInput {
  name: String
  size: Int
  secret: String
  contentType: String
  url: String
  versionMain: VersionUpdateOneWithoutMainInput
  versionTrainData: VersionUpdateOneWithoutTrainDataInput
}

input FileUpdateOneWithoutVersionMainInput {
  create: FileCreateWithoutVersionMainInput
  connect: FileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: FileUpdateWithoutVersionMainDataInput
  upsert: FileUpsertWithoutVersionMainInput
}

input FileUpdateOneWithoutVersionTrainDataInput {
  create: FileCreateWithoutVersionTrainDataInput
  connect: FileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: FileUpdateWithoutVersionTrainDataDataInput
  upsert: FileUpsertWithoutVersionTrainDataInput
}

input FileUpdateWithoutVersionMainDataInput {
  name: String
  size: Int
  secret: String
  contentType: String
  url: String
  versionTrainData: VersionUpdateOneWithoutTrainDataInput
}

input FileUpdateWithoutVersionTrainDataDataInput {
  name: String
  size: Int
  secret: String
  contentType: String
  url: String
  versionMain: VersionUpdateOneWithoutMainInput
}

input FileUpsertWithoutVersionMainInput {
  update: FileUpdateWithoutVersionMainDataInput!
  create: FileCreateWithoutVersionMainInput!
}

input FileUpsertWithoutVersionTrainDataInput {
  update: FileUpdateWithoutVersionTrainDataDataInput!
  create: FileCreateWithoutVersionTrainDataInput!
}

input FileWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FileWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [FileWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  size: Int
  """
  All values that are not equal to given value.
  """
  size_not: Int
  """
  All values that are contained in given list.
  """
  size_in: [Int!]
  """
  All values that are not contained in given list.
  """
  size_not_in: [Int!]
  """
  All values less than the given value.
  """
  size_lt: Int
  """
  All values less than or equal the given value.
  """
  size_lte: Int
  """
  All values greater than the given value.
  """
  size_gt: Int
  """
  All values greater than or equal the given value.
  """
  size_gte: Int
  secret: String
  """
  All values that are not equal to given value.
  """
  secret_not: String
  """
  All values that are contained in given list.
  """
  secret_in: [String!]
  """
  All values that are not contained in given list.
  """
  secret_not_in: [String!]
  """
  All values less than the given value.
  """
  secret_lt: String
  """
  All values less than or equal the given value.
  """
  secret_lte: String
  """
  All values greater than the given value.
  """
  secret_gt: String
  """
  All values greater than or equal the given value.
  """
  secret_gte: String
  """
  All values containing the given string.
  """
  secret_contains: String
  """
  All values not containing the given string.
  """
  secret_not_contains: String
  """
  All values starting with the given string.
  """
  secret_starts_with: String
  """
  All values not starting with the given string.
  """
  secret_not_starts_with: String
  """
  All values ending with the given string.
  """
  secret_ends_with: String
  """
  All values not ending with the given string.
  """
  secret_not_ends_with: String
  contentType: String
  """
  All values that are not equal to given value.
  """
  contentType_not: String
  """
  All values that are contained in given list.
  """
  contentType_in: [String!]
  """
  All values that are not contained in given list.
  """
  contentType_not_in: [String!]
  """
  All values less than the given value.
  """
  contentType_lt: String
  """
  All values less than or equal the given value.
  """
  contentType_lte: String
  """
  All values greater than the given value.
  """
  contentType_gt: String
  """
  All values greater than or equal the given value.
  """
  contentType_gte: String
  """
  All values containing the given string.
  """
  contentType_contains: String
  """
  All values not containing the given string.
  """
  contentType_not_contains: String
  """
  All values starting with the given string.
  """
  contentType_starts_with: String
  """
  All values not starting with the given string.
  """
  contentType_not_starts_with: String
  """
  All values ending with the given string.
  """
  contentType_ends_with: String
  """
  All values not ending with the given string.
  """
  contentType_not_ends_with: String
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  url: String
  """
  All values that are not equal to given value.
  """
  url_not: String
  """
  All values that are contained in given list.
  """
  url_in: [String!]
  """
  All values that are not contained in given list.
  """
  url_not_in: [String!]
  """
  All values less than the given value.
  """
  url_lt: String
  """
  All values less than or equal the given value.
  """
  url_lte: String
  """
  All values greater than the given value.
  """
  url_gt: String
  """
  All values greater than or equal the given value.
  """
  url_gte: String
  """
  All values containing the given string.
  """
  url_contains: String
  """
  All values not containing the given string.
  """
  url_not_contains: String
  """
  All values starting with the given string.
  """
  url_starts_with: String
  """
  All values not starting with the given string.
  """
  url_not_starts_with: String
  """
  All values ending with the given string.
  """
  url_ends_with: String
  """
  All values not ending with the given string.
  """
  url_not_ends_with: String
  versionMain: VersionWhereInput
  versionTrainData: VersionWhereInput
}

input FileWhereUniqueInput {
  id: ID
  secret: String
  url: String
}

"""
A connection to a list of items.
"""
type FnConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [FnEdge]!
  aggregate: AggregateFn!
}

input FnCreateInput {
  name: String!
  versions: VersionCreateManyWithoutFnInput
}

input FnCreateOneWithoutVersionsInput {
  create: FnCreateWithoutVersionsInput
  connect: FnWhereUniqueInput
}

input FnCreateWithoutVersionsInput {
  name: String!
}

"""
An edge in a connection.
"""
type FnEdge {
  """
  The item at the end of the edge.
  """
  node: Fn!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum FnOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FnPreviousValues {
  id: ID!
  name: String!
}

type FnSubscriptionPayload {
  mutation: MutationType!
  node: Fn
  updatedFields: [String!]
  previousValues: FnPreviousValues
}

input FnSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FnSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [FnSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FnWhereInput
}

input FnUpdateInput {
  name: String
  versions: VersionUpdateManyWithoutFnInput
}

input FnUpdateOneWithoutVersionsInput {
  create: FnCreateWithoutVersionsInput
  connect: FnWhereUniqueInput
  delete: Boolean
  update: FnUpdateWithoutVersionsDataInput
  upsert: FnUpsertWithoutVersionsInput
}

input FnUpdateWithoutVersionsDataInput {
  name: String
}

input FnUpsertWithoutVersionsInput {
  update: FnUpdateWithoutVersionsDataInput!
  create: FnCreateWithoutVersionsInput!
}

input FnWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FnWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [FnWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  versions_every: VersionWhereInput
  versions_some: VersionWhereInput
  versions_none: VersionWhereInput
}

input FnWhereUniqueInput {
  id: ID
  name: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  createFn(data: FnCreateInput!): Fn!
  createVersion(data: VersionCreateInput!): Version!
  createFile(data: FileCreateInput!): File!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateFn(data: FnUpdateInput!, where: FnWhereUniqueInput!): Fn
  updateVersion(data: VersionUpdateInput!, where: VersionWhereUniqueInput!): Version
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  deletePost(where: PostWhereUniqueInput!): Post
  deleteFn(where: FnWhereUniqueInput!): Fn
  deleteVersion(where: VersionWhereUniqueInput!): Version
  deleteFile(where: FileWhereUniqueInput!): File
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertFn(where: FnWhereUniqueInput!, create: FnCreateInput!, update: FnUpdateInput!): Fn!
  upsertVersion(where: VersionWhereUniqueInput!, create: VersionCreateInput!, update: VersionUpdateInput!): Version!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput): BatchPayload!
  updateManyFns(data: FnUpdateInput!, where: FnWhereInput): BatchPayload!
  updateManyVersions(data: VersionUpdateInput!, where: VersionWhereInput): BatchPayload!
  updateManyFiles(data: FileUpdateInput!, where: FileWhereInput): BatchPayload!
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  deleteManyFns(where: FnWhereInput): BatchPayload!
  deleteManyVersions(where: VersionWhereInput): BatchPayload!
  deleteManyFiles(where: FileWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
A connection to a list of items.
"""
type PostConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  isPublished: Boolean
  title: String!
  text: String!
}

"""
An edge in a connection.
"""
type PostEdge {
  """
  The item at the end of the edge.
  """
  node: Post!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PostPreviousValues {
  id: ID!
  isPublished: Boolean!
  title: String!
  text: String!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PostSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PostSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  isPublished: Boolean
  title: String
  text: String
}

input PostWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PostWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PostWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  isPublished: Boolean
  """
  All values that are not equal to given value.
  """
  isPublished_not: Boolean
  title: String
  """
  All values that are not equal to given value.
  """
  title_not: String
  """
  All values that are contained in given list.
  """
  title_in: [String!]
  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]
  """
  All values less than the given value.
  """
  title_lt: String
  """
  All values less than or equal the given value.
  """
  title_lte: String
  """
  All values greater than the given value.
  """
  title_gt: String
  """
  All values greater than or equal the given value.
  """
  title_gte: String
  """
  All values containing the given string.
  """
  title_contains: String
  """
  All values not containing the given string.
  """
  title_not_contains: String
  """
  All values starting with the given string.
  """
  title_starts_with: String
  """
  All values not starting with the given string.
  """
  title_not_starts_with: String
  """
  All values ending with the given string.
  """
  title_ends_with: String
  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  text: String
  """
  All values that are not equal to given value.
  """
  text_not: String
  """
  All values that are contained in given list.
  """
  text_in: [String!]
  """
  All values that are not contained in given list.
  """
  text_not_in: [String!]
  """
  All values less than the given value.
  """
  text_lt: String
  """
  All values less than or equal the given value.
  """
  text_lte: String
  """
  All values greater than the given value.
  """
  text_gt: String
  """
  All values greater than or equal the given value.
  """
  text_gte: String
  """
  All values containing the given string.
  """
  text_contains: String
  """
  All values not containing the given string.
  """
  text_not_contains: String
  """
  All values starting with the given string.
  """
  text_starts_with: String
  """
  All values not starting with the given string.
  """
  text_not_starts_with: String
  """
  All values ending with the given string.
  """
  text_ends_with: String
  """
  All values not ending with the given string.
  """
  text_not_ends_with: String
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  fns(where: FnWhereInput, orderBy: FnOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Fn]!
  versions(where: VersionWhereInput, orderBy: VersionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Version]!
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  post(where: PostWhereUniqueInput!): Post
  fn(where: FnWhereUniqueInput!): Fn
  version(where: VersionWhereUniqueInput!): Version
  file(where: FileWhereUniqueInput!): File
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  fnsConnection(where: FnWhereInput, orderBy: FnOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FnConnection!
  versionsConnection(where: VersionWhereInput, orderBy: VersionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VersionConnection!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  fn(where: FnSubscriptionWhereInput): FnSubscriptionPayload
  version(where: VersionSubscriptionWhereInput): VersionSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
}

"""
A connection to a list of items.
"""
type VersionConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [VersionEdge]!
  aggregate: AggregateVersion!
}

input VersionCreateInput {
  number: String!
  fn: FnCreateOneWithoutVersionsInput!
  main: FileCreateOneWithoutVersionMainInput
  trainData: FileCreateOneWithoutVersionTrainDataInput
}

input VersionCreateManyWithoutFnInput {
  create: [VersionCreateWithoutFnInput!]
  connect: [VersionWhereUniqueInput!]
}

input VersionCreateOneWithoutMainInput {
  create: VersionCreateWithoutMainInput
  connect: VersionWhereUniqueInput
}

input VersionCreateOneWithoutTrainDataInput {
  create: VersionCreateWithoutTrainDataInput
  connect: VersionWhereUniqueInput
}

input VersionCreateWithoutFnInput {
  number: String!
  main: FileCreateOneWithoutVersionMainInput
  trainData: FileCreateOneWithoutVersionTrainDataInput
}

input VersionCreateWithoutMainInput {
  number: String!
  fn: FnCreateOneWithoutVersionsInput!
  trainData: FileCreateOneWithoutVersionTrainDataInput
}

input VersionCreateWithoutTrainDataInput {
  number: String!
  fn: FnCreateOneWithoutVersionsInput!
  main: FileCreateOneWithoutVersionMainInput
}

"""
An edge in a connection.
"""
type VersionEdge {
  """
  The item at the end of the edge.
  """
  node: Version!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum VersionOrderByInput {
  id_ASC
  id_DESC
  number_ASC
  number_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type VersionPreviousValues {
  id: ID!
  number: String!
}

type VersionSubscriptionPayload {
  mutation: MutationType!
  node: Version
  updatedFields: [String!]
  previousValues: VersionPreviousValues
}

input VersionSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [VersionSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [VersionSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VersionWhereInput
}

input VersionUpdateInput {
  number: String
  fn: FnUpdateOneWithoutVersionsInput
  main: FileUpdateOneWithoutVersionMainInput
  trainData: FileUpdateOneWithoutVersionTrainDataInput
}

input VersionUpdateManyWithoutFnInput {
  create: [VersionCreateWithoutFnInput!]
  connect: [VersionWhereUniqueInput!]
  disconnect: [VersionWhereUniqueInput!]
  delete: [VersionWhereUniqueInput!]
  update: [VersionUpdateWithWhereUniqueWithoutFnInput!]
  upsert: [VersionUpsertWithWhereUniqueWithoutFnInput!]
}

input VersionUpdateOneWithoutMainInput {
  create: VersionCreateWithoutMainInput
  connect: VersionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: VersionUpdateWithoutMainDataInput
  upsert: VersionUpsertWithoutMainInput
}

input VersionUpdateOneWithoutTrainDataInput {
  create: VersionCreateWithoutTrainDataInput
  connect: VersionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: VersionUpdateWithoutTrainDataDataInput
  upsert: VersionUpsertWithoutTrainDataInput
}

input VersionUpdateWithoutFnDataInput {
  number: String
  main: FileUpdateOneWithoutVersionMainInput
  trainData: FileUpdateOneWithoutVersionTrainDataInput
}

input VersionUpdateWithoutMainDataInput {
  number: String
  fn: FnUpdateOneWithoutVersionsInput
  trainData: FileUpdateOneWithoutVersionTrainDataInput
}

input VersionUpdateWithoutTrainDataDataInput {
  number: String
  fn: FnUpdateOneWithoutVersionsInput
  main: FileUpdateOneWithoutVersionMainInput
}

input VersionUpdateWithWhereUniqueWithoutFnInput {
  where: VersionWhereUniqueInput!
  data: VersionUpdateWithoutFnDataInput!
}

input VersionUpsertWithoutMainInput {
  update: VersionUpdateWithoutMainDataInput!
  create: VersionCreateWithoutMainInput!
}

input VersionUpsertWithoutTrainDataInput {
  update: VersionUpdateWithoutTrainDataDataInput!
  create: VersionCreateWithoutTrainDataInput!
}

input VersionUpsertWithWhereUniqueWithoutFnInput {
  where: VersionWhereUniqueInput!
  update: VersionUpdateWithoutFnDataInput!
  create: VersionCreateWithoutFnInput!
}

input VersionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [VersionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [VersionWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  number: String
  """
  All values that are not equal to given value.
  """
  number_not: String
  """
  All values that are contained in given list.
  """
  number_in: [String!]
  """
  All values that are not contained in given list.
  """
  number_not_in: [String!]
  """
  All values less than the given value.
  """
  number_lt: String
  """
  All values less than or equal the given value.
  """
  number_lte: String
  """
  All values greater than the given value.
  """
  number_gt: String
  """
  All values greater than or equal the given value.
  """
  number_gte: String
  """
  All values containing the given string.
  """
  number_contains: String
  """
  All values not containing the given string.
  """
  number_not_contains: String
  """
  All values starting with the given string.
  """
  number_starts_with: String
  """
  All values not starting with the given string.
  """
  number_not_starts_with: String
  """
  All values ending with the given string.
  """
  number_ends_with: String
  """
  All values not ending with the given string.
  """
  number_not_ends_with: String
  fn: FnWhereInput
  main: FileWhereInput
  trainData: FileWhereInput
}

input VersionWhereUniqueInput {
  id: ID
  number: String
}
